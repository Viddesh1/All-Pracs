Aim: Demonstrating MapReduce in MongoDB to count the number of female (F) and male (M) respondents in the database.

Practical 8

Background Information:

MapReduce:

In MongoDB, map-reduce is a data processing programming model that helps to perform operations on large data sets and produce aggregated results. MongoDB provides the mapReduce() function to perform the map-reduce operations. This function has two main functions, i.e., map function and reduce function. The map function is used to group all the data based on the key-value and the reduce function is used to perform operations on the mapped data. So, the data is independently mapped and reduced in different spaces and then combined in the function and the result will be saved to the specified new collection. This mapReduce() function generally operates on large data sets only. Using Map Reduce you can perform aggregation operations such as max, avg on the data using some key and it is like groupBy in SQL. It performs on data independently and parallel.

code/output:

Command to create a Database
---->use GenderData
>use GenderData 
Switched to db GenderData
>


Command to create a Collection
-- ->db.createCollection("Data")

> db.createCollection ("Data")

{"ok": 1 }
>


Command to view Collection

--->show collections


Command to insert multiple documents in Collection
----->db.Data.insertMany([["gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":" F},{"gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":"F"},{"gender":"F"} {"gender":"M"},{"gender": "M"},{"gender":"M"},{"gender":"M"},{"gender":"M"},{"gender":"M"},{"gender":"M "},{"gender":"M"},{"gender":"M"},{"gender":"M"}])


Command to create map

-->var map = function() {emit({ gender:this.gender }, { count:1});};

>var map function() (emit({ gender: this.gender ), { count:1});};
>


Command to create reduce

---->var reduce = function(key, values) (var count = 0;values.forEach(function(v) (count = count+1});return {

count:count}};
>
>var reduce function(key, values) (var count 8;values.forEach(function(v) (count count+1});return (count:count});
>


Command to store output in new collection

---->db.Data.mapReduce(map.reduce, (out:"countResult"});

>
>db.Data.mapReduce (map, reduce, (out "countResult"});
{ "result": "countResult", "ok": 1 }
>


Command to view final count result

---->db.countResult.find()

>db.countResult.find()

"_id" : { "gender" : "F" }, "value": {"count": 13 } } "_id" : { "gender" : "M" }, "value": {"count": 10 } }


